for (int i = 0; i < tiles.size(); i++) {
			for (int j = i + 1; j < tiles.size(); j++) {
				if (collision(tiles.get(i), tiles.get(j))) { // if these two

					Tile one = tiles.get(i);
					Tile two = tiles.get(j);
					int difY = Math.abs(two.getCenterY() - one.getCenterY());

					double angle = Math.asin((difY) / (one.getRadius() +
							two.getRadius()));
					double a = two.getRadius() * Math.cos(angle);
					double b = two.getRadius() * Math.sin(angle);

					double contactX = (double) two.getCenterX() + a;
					double contactY = (double) two.getCenterY() + b;

					double tanSlope = -((double) two.getX() - contactX) / ((double)
							two.getY() - contactY);
					double angleSlope = Math.atan(tanSlope);

					double difAngleOne = one.getDir() - angleSlope;
					double difAngleTwo = two.getDir() - angleSlope;
					one.setDir(Math.PI - difAngleOne);
					hit(one);
					one.setSpeed(15);
					one.setDir(Math.PI - difAngleTwo);
					hit(two);
					two.setSpeed(15);
				}
			}
		}
		
		for(Tile tile: tiles) {
			if(tile.getX() >= 523 && tile.getY() <= 70 || tile.getX() <= 75 && tile.getY() <= 70 || tile.getX() >= 523 //if it goes into a goal
					&& tile.getY() >= 517 || tile.getX() <= 75 && tile.getY() >= 517) {
				tile.scored();
				score++;
				t.stop();
			}
				
			if (tile.getY() <= 36) { // if striker hits upper wall
				double roundDir = tile.getDir() * 10;
				roundDir = Math.round(roundDir);
				roundDir /= 10;

				double verPi = Math.PI / 2;
				verPi = verPi * 10;
				verPi = Math.round(verPi);
				verPi = verPi / 10;

				if (roundDir == verPi) {
					System.out.println("90");
					tile.setDir((Math.PI * 3) / 2);

				}

				else {
					tile.setDir((2 * Math.PI) - s.getDir());
					System.out.println("roundDir: " + roundDir + " currentDir: " + tile.getDir());
				}

				tile.setSpeed(tile.getSpeed() * 0.5);
				tile.setTime(0);
				hit(tile);
			}

			else if (tile.getY() >= 530) { //hits lower wall

				double roundDir = tile.getDir() * 10;
				roundDir = Math.round(roundDir);
				roundDir /= 10;

				double verPi = 3 * Math.PI / 2;
				verPi = verPi * 10;
				verPi = Math.round(verPi);
				verPi = verPi / 10;

				if (roundDir == verPi) {
					System.out.println("90");
					tile.setDir(Math.PI);
				} else if (tile.getDir() > verPi) {
					tile.setDir(2 * Math.PI - tile.getDir());
				}

				else if (tile.getDir() < verPi) {
					tile.setDir((2 * Math.PI) - tile.getDir());
				}
				tile.setSpeed(tile.getSpeed() * 0.5);
				tile.setTime(0);
				hit(tile);
			}

			else if (tile.getX() <= 36) { //hits left wall
				double roundDir = tile.getDir() * 10;
				roundDir = Math.round(roundDir);
				roundDir /= 10;

				double horPi = Math.PI;
				horPi = horPi * 10;
				horPi = Math.round(horPi);
				horPi = horPi / 10;

				if (roundDir == horPi) {
					System.out.println("180");
					tile.setDir(0);
				} else {
					tile.setDir((2 * Math.PI) - tile.getDir());
					System.out.println("roundDir: " + roundDir + " currentDir: " + tile.getDir());
				}
				tile.setSpeed(s.getSpeed() * 0.5);
				tile.setTime(0);
				hit(tile);

			} else if (tile.getX() >= 536) { //hits right wall
				double roundDir = tile.getDir() * 10;
				roundDir = Math.round(roundDir);
				roundDir /= 10;

				double horPi = 0;

				if (roundDir == horPi) {
					System.out.println("0");
					s.setDir(Math.PI);
				} else {
					s.setDir((2 * Math.PI) - tile.getDir());
				}
				
				tile.setTime(0);
				hit(tile);
			}
		}
